---
title: 斑马思维的 Hybrid 方案
date: 2019-1-17 10:52
tags:
    - FE
    - Hybrid
---

斑马的研发同学在过去一个月快速迭代出了一个 Hybrid 框架。Hybrid 并不是太新鲜的技术，就目前而言，ReactNative 和 Flutter 都是可选的方案。这篇文章记录了下我们当时 Hybrid 方案的思考过程。

YTKWebApp 的目的是解决团队和业务目前存在的问题。

目前我们的业务发展速度很快，飞速发展的业务给技术团队带来了很多压力和挑战。比如客户端工作量、发版周期、线上问题修复等等诸多不便之处都一直是困扰团队的问题。

## 遇到的问题

### 工作量

Native 方案一个最直观的问题就是两倍工作量，同一个需求需要 iOS 和 Android 双端开发。双倍的开发成本同时会带来双倍的测试工作、双倍的维护成本以及双倍的 Bug 概率。

### 发版周期和热修复

客户端开发由于天然存在审核的问题，使得快速迭代变得困难。尽管 Android 存在一些热更新方案，但 iOS 难以实现同样的功能。这样会导致客户端如果出现逃逸 Bug，处理的周期会很长。

另外有些快速迭代业务，例如商城。在样式和交互上可能会频繁做出调整。Native 客户端为了满足这些业务需求，会使得业务的建模变得非常复杂。

## Web 方案的尝试和问题

客户端双倍工作量和发版周期的问题在所有的客户端团队中都存在，也一直有各种各样的跨平台、跨端开发方案来试图解决这些问题，这些方案之间互有优劣。

### Native 跨平台开发方案

这个方案以 ReactNative、Flutter 为代表，特点是一次开发，多端运行，同时在端上渲染都是 Native 控件。开发效率高，性能和体验比纯 Web App 方案要更好。缺点是学习门槛高，而且技术方案非常复杂，出现问题难以排查。

### Hybrid App 方案

Hybrid App 方案以 2012 年前的 Facebook 为代表，UI 控件都由 HTML 来实现。这个方案开发效率很高，但性能较差，对用户网络要求高，用户体验不好。Facebook 在做了两年尝试后，最终由于性能问题和用户体验不佳，在 2012 年全面抛弃了这个方案。

我们目前在做的 WebApp 方案也是 Hybrid 方案的一种，那么为什么我们会选择一个在 2012 年被 Facebook 放弃的方案呢？我认为最主要的一个原因是手机性能和网络条件的快速发展，使得之前的性能瓶颈不再是问题。同时由于微信 X5 这种定制浏览器内核的成熟，使得 Android 平台上 webview 的兼容性问题逐渐得到解决。Hybrid App 方案又开始变得可行。

一个证据是近两年各种小程序方案的疯狂发展，小程序方案的本质就是 Hybrid App。

### 小程序方案

上面提到，小程序方案本质上就是 Hybrid App。那么我们为什么不在 App 内用小程序方案呢？

首先，市面上缺乏成熟的小程序方案开源框架。例如百度智能小程序这样的框架，只是开放了 SDK，核心部分并没有开源，容易踩坑。

其次，小程序方案是一个全面性的框架方案。前端必须在小程序框架下进行开发，不能使用已有的成熟框架，例如 Vue。这个问题又催生出了一大批类似「小程序平台上的 Vue」这样的框架，例如 Taro。这些框架的成熟度远不及 Vue、Angular，容易踩坑。

我们希望的是一个性能和体验和小程序一样，同时没有框架约束的解决方案。

## 我们想要的方案

### Native 体验

Native 页面和 Web 页面之间最大的一个区别就是 Web 页面会白屏，即浏览器从加载页面开始，到页面渲染完成之前，整个 Web 页面是空白的。这段时间再短，也会给用户一种白屏的不佳体验。同时 Web 在切换页面时，一旦出现需要重新加载页面的情况，两个页面的衔接也会出现白屏，体验不好。

Web 的多媒体 API 也存在一些体验问题，例如拍照、文件选择和录音。对于体验不好的 API，我们的方案应当一一给予解决。

### 不代替 Native

Web 方案有天然的性能缺陷，对于交互效果、性能要求极高的场合，我们希望可以很容易的由 Native 来实现，同时 Native 实现的部分可以无缝和 Web 部分进行交互。例如一个有较多滑动效果的长列表，由 Native 实现，但点击单个列表项进入的详情页由 Web 来展示。这两者之间的衔接应该是非常平顺的。

### 一个库，而不是一个框架

市面上有非常多的 Hybrid App 方案，比如 PhoneGap、Ionic 等，试图通过一套方案来开发一个完整的 App。这种方案或多或少的要求开发者必须按照框架的约束来创建项目。

框架的问题在于一锤子买卖。一个项目一旦从一个框架开始，那么它将来很难转型。同时框架之间有天然的排他性。例如一旦项目从 PhoneGap 框架开始，它基本上不可能同时再用 Ionic。已有的项目也很难中途插入一个成熟框架。最终团队会被框架所绑架，技术重构和转型变得困难。

我们希望做出来的东西，可以很方便集成到一个已有成熟项目中，同时不排斥其他框架的存在。

### 就是 Web

不像 PhoneGap、微信小程序方案这种框架，我们希望 WebApp 应该可以使用任何浏览器上能用的前端技术。因为它就是跑在 Web 浏览器中的。

### 在浏览器中开发，但不在浏览器中运行

很多 Hybrid 方案都会说自己可以一次编写，Web / iOS / Android 三端运行。为了实现这种效果，需要在浏览器端做非常多的工作，或者对客户端的效果进行取舍。我们项目一开始的初衷是解决客户端上开发效率的问题，在 Web 上运行，并不是我们要解决的问题。

## 关键技术点

### 生命周期

生命周期的设计是为了解决加载过程中白屏问题。即通过一些状态和事件，Web 告诉 Native 页面何时有内容可以开始展示。在 Web 不可展示的过程中，Native 实现一些友好的加载提示，而不是白屏。

### 缓存和预加载

缓存和预加载解决加载时间慢的问题。

### 多 WebApp 管理

多 WebApp 管理方案解决多个 Web 页面切换时的体验问题。原理是同时管理多个 WebView，结合缓存、预加载、生命周期等等上面提到的多个技术方案，最终应该实现 Native 一样的页面切换效果。
